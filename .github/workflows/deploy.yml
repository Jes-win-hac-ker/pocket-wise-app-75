name: Deploy PocketWise App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
    - name: Run tests (if available)
      run: npm test --if-present
      
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        publish_branch: gh-pages
        force_orphan: true
        
  # Alternative deployment options (uncomment as needed)
  
  # Deploy to Netlify
  # deploy-netlify:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-deploy
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       
  #   - name: Install dependencies
  #     run: npm ci
  #     
  #   - name: Build application
  #     run: npm run build
  #     
  #   - name: Deploy to Netlify
  #     uses: nwtgck/actions-netlify@v2
  #     with:
  #       publish-dir: './dist'
  #       production-branch: main
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       deploy-message: "Deploy from GitHub Actions"
  #     env:
  #       NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #       NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Deploy to Vercel
  # deploy-vercel:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-deploy
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Deploy to Vercel
  #     uses: amondnet/vercel-action@v25
  #     with:
  #       vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #       vercel-org-id: ${{ secrets.ORG_ID }}
  #       vercel-project-id: ${{ secrets.PROJECT_ID }}
  #       vercel-args: '--prod'

  # Deploy to AWS S3 + CloudFront
  # deploy-aws:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-deploy
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       
  #   - name: Install dependencies
  #     run: npm ci
  #     
  #   - name: Build application
  #     run: npm run build
  #     
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1
  #       
  #   - name: Deploy to S3
  #     run: |
  #       aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }} --delete
  #       
  #   - name: Invalidate CloudFront
  #     run: |
  #       aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  # Deploy to Firebase Hosting
  # deploy-firebase:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: build-and-deploy
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       
  #   - name: Install dependencies
  #     run: npm ci
  #     
  #   - name: Build application
  #     run: npm run build
  #     
  #   - name: Deploy to Firebase
  #     uses: FirebaseExtended/action-hosting-deploy@v0
  #     with:
  #       repoToken: '${{ secrets.GITHUB_TOKEN }}'
  #       firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
  #       projectId: your-firebase-project-id
  #       channelId: live

  # Deploy using Docker
  # docker-deploy:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #     
  #   - name: Login to DockerHub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #       
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: |
  #         your-dockerhub-username/pocket-wise-app:latest
  #         your-dockerhub-username/pocket-wise-app:${{ github.sha }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

# Deploy PocketWise App to GitHub Pages
# Trigger deployment: 2025-10-01